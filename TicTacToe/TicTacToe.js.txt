const state = {
 //creation of multiple variables
 gameElement: document.querySelector(".game"),
 cells: Array(9).fill(null), //set all cells in this array with null
 symbols: ["o", "x"], //possible game symbols
 winningCombinations: [
   [0, 1, 2], //top row
   [3, 4, 5], //middle row
   [6, 7, 8], //bottom row
 
   [0, 3, 6], //left column
   [1, 4, 7], //middle column
   [2, 5, 8], //right column
 
   [0, 4, 8], //left diagonal
   [2, 4, 6] //right diagonal
 ],
 gameFinished: false //the game is not finished, so it is set to false when initializing
};
 
function drawBoard() {
 state.gameElement.innerHTML = "";
 
 for (let i = 0; i < 9; i++) {
   //create 9 cells
   const cell = document.createElement("div");
   cell.classList.add("cell");
 
   if (state.cells[i]) {
     //does the cell have something?
     const cellSymbol = document.createElement("p"); //create <p></p>
     cellSymbol.innerText = state.cells[i];
     cellSymbol.classList.add("symbol");
 
     cell.append(cellSymbol);
   } else {
     //if not, its empty, run next section
 
     cell.addEventListener("click", function () {
       if (state.gameFinished) {
         //check if game is finished
         return;
       }
       state.symbols.reverse(); //change turn: by reversing the symbols array
 
       state.cells[i] = state.symbols[0]; //select the one whose turn it is
 
       drawBoard();
 
       if (checkForWinner()) {
         //Winner code goes here
         state.gameFinished = true; //game is finished
         drawMessage(`${state.symbols[0]} won!`); //winner message
         return; //break out of function
       }
       if (checkForDraw()) {
         drawMessage("It's a draw!");
         state.gameFinished = true;
       }
     });
   }
 
   state.gameElement.append(cell);
 }
}
 
function drawMessage(message) {
 const banner = document.createElement("div");
 banner.classList.add("banner");
 
 const h1 = document.createElement("h1");
 h1.innerHTML = message;
 
 banner.append(h1);
 
 state.gameElement.append(banner);
}
 
function checkForDraw() {
 return state.cells.every(function (cell) {
   return cell !== null;
 });
}
 
function checkForWinner() {
 return state.winningCombinations.some(function (combo) {
   const cells = combo.map(function (index) {
     return state.cells[index];
   });
   //the array does not have a null    AND  all of the values are the same
   return !cells.includes(null) && new Set(cells).size === 1;
 });
}
drawBoard();
 

